<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Tests</name>
    </assembly>
    <members>
        <member name="T:CMS.Tests.CreateDatabaseBeforeTestsAttribute">
            <summary>
            <para>Indicates that database for isolated integration tests is created prior to executing any of the tests in the class. </para>
            <para>This database can be filled with custom objects during 'TestFixtrueSetup' / 'ClassInitialize'. </para>
            <para>Each test uses copy of this database.</para>
            </summary>
        </member>
        <member name="T:CMS.Tests.RelatedBugAttribute">
            <summary>
            Indicates that test was created due to bug fix.
            </summary>
        </member>
        <member name="M:CMS.Tests.RelatedBugAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Indicates that test was created due to bug fix.
            </summary>
            <param name="bugIdentifier">Bug identifier (eg. issue number)</param>
            <param name="isPublic">True if bug is known publicly</param>
        </member>
        <member name="T:CMS.Tests.SharedDatabaseForAllTestsAttribute">
            <summary>
            Indicates that database is shared for all isolated integration tests that are in same class.
            (ie. Database is created before first test run and it is deleted after last test run)
            </summary>
        </member>
        <member name="T:CMS.Tests.AppStateReset">
            <summary>
            Provides support for reset of application state
            </summary>
        </member>
        <member name="M:CMS.Tests.AppStateReset.StartsWithCMS(System.Reflection.Assembly)">
            <summary>
            Returns true if the assembly name starts with CMS
            </summary>
            <param name="asm">Assembly</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.Reset">
            <summary>
            Resets the 
            </summary>
        </member>
        <member name="M:CMS.Tests.AppStateReset.ResetType(System.Type)">
            <summary>
            Resets a specific type
            </summary>
            <param name="type">Type to reset</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.RunStaticConstructor(System.Type)">
            <summary>
            Runs a type static constructor to re-initialize its fields
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetAssemblyTypes(System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName})">
            <summary>
            Gets the list of types to reset
            </summary>
            <param name="assemblies">Assemblies to process</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets types from the given assembly
            </summary>
            <param name="asm">Assembly</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetCoveredAssemblies">
            <summary>
            Gets the list of covered assemblies
            </summary>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetInitSequence(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            Gets the initialization sequence for the given assemblies
            </summary>
            <param name="asmList">Assembly list</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetInitSequence(System.Reflection.Assembly)">
            <summary>
            Gets the initialization sequence for the given assembly
            </summary>
            <param name="asm">Assembly</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.TypeIsSupported(System.Type)">
            <summary>
            Checks if the given type is supported for reset
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.IsCompilerGenerated(System.Type)">
            <summary>
            Checks if the given type if compiler generated type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.Log(System.Int32,System.String,System.String)">
            <summary>
            Adds a new record to the log file
            </summary>
            <param name="indent">Indentation</param>
            <param name="mark">Text mark (should be 4 chars or less)</param>
            <param name="text">Text to log</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.ReadFields(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Reads all the given fields to cause default initialization of types
            </summary>
            <param name="fields">Fields to read</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.ResetFields(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo})">
            <summary>
            Resets the given list of fields to their type defaults
            </summary>
            <param name="fields">Fields to reset</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetFieldsToReset(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Clears the class static fields of the given type to default type values
            </summary>
            <param name="types">Types</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetFieldsToReset(System.Type)">
            <summary>
            Clears the class static fields of the given type to default type values
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.CannotResetField(System.Reflection.FieldInfo)">
            <summary>
            Returns true if the application reset is able to reset the given field
            </summary>
            <param name="field">Field to check</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.IsSystemField(System.Reflection.FieldInfo)">
            <summary>
            Returns true if the given field is a special system field
            </summary>
            <param name="field">Field to check</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.GetFieldState(System.Type,System.Object)">
            <summary>
            Gets the current field state of the given type and object instance
            </summary>
            <param name="type">Type</param>
            <param name="instance">Instance</param>
        </member>
        <member name="M:CMS.Tests.AppStateReset.RestoreFieldState(System.Object,System.Collections.Generic.IEnumerable{CMS.Tests.AppStateReset.FieldState})">
            <summary>
            Restores the field state for the given object
            </summary>
            <param name="instance">Object instance</param>
            <param name="fieldStates">Field states returned earlier by <see cref="M:CMS.Tests.AppStateReset.GetFieldState(System.Type,System.Object)"/></param>
        </member>
        <member name="P:CMS.Tests.AppStateReset.LogFile">
            <summary>
            Log file
            </summary>
        </member>
        <member name="P:CMS.Tests.AppStateReset.AssemblyCondition">
            <summary>
            Assembly condition for resetting state. Default if prefix "CMS."
            </summary>
        </member>
        <member name="T:CMS.Tests.AppStateReset.FieldState">
            <summary>
            Container for holding the specific field state
            </summary>
        </member>
        <member name="M:CMS.Tests.AppStateReset.FieldState.#ctor(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="P:CMS.Tests.AppStateReset.FieldState.Field">
            <summary>
            Field info
            </summary>
        </member>
        <member name="P:CMS.Tests.AppStateReset.FieldState.Value">
            <summary>
            Field value
            </summary>
        </member>
        <member name="T:CMS.Tests.AutomatedTestsWithConnString">
            <summary>
            Base class for tests that use connection string from config file
            </summary>
        </member>
        <member name="T:CMS.Tests.AutomatedTestsWithData">
            <summary>
            Base class for automated tests with data support
            </summary>
        </member>
        <member name="T:CMS.Tests.AutomatedTests">
            <summary>
            Base class for advanced tests
            </summary>
        </member>
        <member name="T:CMS.Tests.IMSTestSetup">
            <summary>
            Interface that define methods required for test initialization of MSTests.
            </summary>
        </member>
        <member name="M:CMS.Tests.IMSTestSetup.InitializeTestClass">
            <summary>
            Initializes the test class for all MSTests.
            </summary>
            <remarks>
            Calling this method in NUnit tests causes duplicate initialization.
            </remarks>
        </member>
        <member name="M:CMS.Tests.IMSTestSetup.CleanUpTestClass">
            <summary>
            Cleans up the class after all MSTests run.
            </summary>
            <remarks>
            Calling this method in NUnit tests causes duplicate initialization.
            </remarks>
        </member>
        <member name="F:CMS.Tests.AutomatedTests.DATA_FOLDER">
            <summary>
            Path to the data folder. Default is "Data\\"
            </summary>
        </member>
        <member name="F:CMS.Tests.AutomatedTests.APP_KEY_LICENSE_KEY">
            <summary>
            Name of app key for license key that is used in isolated integration tests.
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.AddExtender(CMS.Tests.TestExtender)">
            <summary>
            Adds the test extender
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.GetTestExtenders">
            <summary>
            Gets the current test extenders
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.RunExtenderAction``1(System.Action{CMS.Tests.TestExtender},System.Boolean)">
            <summary>
            Gets the current test extenders
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.InitializeTestClassInternal">
            <summary>
            Initializes the test class for all tests<para/>
            Note: Calling this method in NUnit tests causes duplicate initialization
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CleanUpTestClassInternal">
            <summary>
            Cleans up the class after all tests are run <para/>
            Note: Calling this method in NUnit tests causes duplicate clean up
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.InitFixtureBase">
            <summary>
            Initializes the text fixture for all tests
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.ResetContexts">
            <summary>
            Resets all current contexts
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.InitBase">
            <summary>
            Inits test base (Ensures static context, reset handlers)
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.LoadTestName">
            <summary>
            Loads the current test name into the context
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CleanUpBase">
            <summary>
            Cleans test base (Restore static context)
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CleanUpFixtureBase">
            <summary>
            Initializes the text fixture for all tests
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.IsMSTest(System.Type)">
            <summary>
            Returns true if the given test is a MS test type
            </summary>
            <param name="testType">Test type</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.ClearCache">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.GetSolutionFolderPath">
            <summary>
            Gets a path to the root folder of the Kentico solution provided that it contains a test project with current test.
            </summary>
            <returns>A path to the Kentico solution folder, if found; otherwise, null.</returns>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.GetTestAppSetting(System.String)">
            <summary>
            Gets the app setting from test configuration file 
            </summary>
            <param name="name">App setting name</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.GetTestConnectionString(System.String)">
            <summary>
            Gets the connection string of the given name from test configuration file
            </summary>
            <param name="name">Connection string name</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CleanUpDataContext">
            <summary>
            Cleans up the data context
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.TestMilestone">
            <summary>
            Milestone
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CreateReset">
            <summary>
            Creates the reset instance
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.AutomaticAppStateReset">
            <summary>
            Resets the application state in case the application already went through pre-initialization phase. Does not perform reset for the first executed test.
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.ResetAppState(System.String)">
            <summary>
            Resets the application state
            </summary>
            <param name="logFile">Optional file to log the reset sequence</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.ResetAppStateForFixture">
            <summary>
            Reset the application state (if not first test fixture)
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.InitApplication">
            <summary>
            Performs application initialization if not already initialized
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.EndApplication">
            <summary>
            Performs application end 
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.InitializeTestClass">
            <summary>
            Initialize MSTest class for all tests.
            </summary>
            <remarks>
            Calling this method in NUnit tests causes duplicate initialization.
            </remarks>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CleanUpTestClass">
            <summary>
            Cleans up the MSTest class after all tests.
            </summary>
            <remarks>
            Calling this method in NUnit tests causes duplicate initialization.
            </remarks>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.GlobalTestsConfig">
            <summary>
            Global configuration file for tests (Tests.config located in root directory)
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.Current">
            <summary>
            Current test class 
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.TestExtenders">
            <summary>
            List of current test extenders
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.FirstTest">
            <summary>
            Returns true if the test is the first one executed in this fixture
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.FirstTestInDomain">
            <summary>
            Returns true if the test is the first one executed on current domain
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.TestInitialized">
            <summary>
            Returns true if the test was correctly initialized
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.ApplicationInitialized">
            <summary>
            Returns true if the application is currently initialized
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.LastTestName">
            <summary>
            Last test name
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.CurrentTestName">
            <summary>
            Current test name
            </summary>
        </member>
        <member name="T:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration">
            <summary>
            Represents a configuration of the test environment related to CMS dependencies.
            </summary>
            <remarks>
            CMS dependencies are third-party assemblies that Kentico requires to run.
            They are kept in a special folder to prevent version conflicts.
            The runtime is configured to look in this folder when a referenced assembly is not found.
            This configuration allows developers to use different versions of third-party assemblies then Kentico does.
            </remarks>
        </member>
        <member name="F:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.mDependenciesFolderName">
            <summary>
            The name of the folder with CMS dependencies.
            </summary>
        </member>
        <member name="F:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.mDependenciesSettingName">
            <summary>
            The name of the setting with the path to the folder that contains CMS dependencies.
            </summary>
        </member>
        <member name="F:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.mExceptionMessage">
            <summary>
            The message of the exception that is thrown when the folder with CMS dependencies is not found.
            </summary>
        </member>
        <member name="F:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.mDependenciesFolderPath">
            <summary>
            The path to the folder with CMS dependencies.
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration"/> class.
            </summary>
            <param name="dependenciesFolderPath">The path to the folder with CMS dependencies.</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.Create">
            <summary>
            Detects the path to the folder with CMS dependencies.
            </summary>
            <remarks>
            This method uses the following strategies to locate the folder with CMS dependencies:
            <list type="bullet">
            <item><description>Look for the CMSTestDependenciesFolderPath application setting in the test configuration file.</description></item>
            <item><description>Look for the CMSDependencies subfolder in the folder where the test assembly is located. This strategy is intended for projects that use the Kentico.Libraries NuGet package.</description></item>
            <item><description>Look for the CMS/CMSDependencies subfolder in the CMS solution folder. This is the original strategy for test projects that are a part of the CMS solution.</description></item>
            </list>
            </remarks>
            <returns>A configuration object with a detected path to an existing folder with CMS dependencies.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The folder with CMS dependencies was not found.</exception>
        </member>
        <member name="P:CMS.Tests.AutomatedTests.CmsDependenciesConfiguration.DependenciesFolderPath">
            <summary>
            Gets the path to the folder with CMS dependencies.
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.TestsWithDataFixtureSetup">
            <summary>
            Fixture setup
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.TestsWithDataSetup">
            <summary>
            Test setup
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.TestsWithDataTearDown">
            <summary>
            Cleans test base (Restore static context)
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.TestsWithDataFixtureTearDown">
            <summary>
            Fixture tear down
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.ResetAllFakes">
            <summary>
            Resets all fakes registered within the system
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.Fake">
            <summary>
            Returns the entry which provides the fake methods from various modules
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.Fake``1(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Fakes the data for the given info
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.Fake``2(``1,System.Boolean)">
            <summary>
            Fakes the data for the given info and provider
            </summary>
            <param name="providerObject">Provider object</param>
            <param name="fakeInfo">If true, the info object structure is faked</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.FakeObjects``1(System.Int32,System.Int32)">
            <summary>
            Fakes the data for the given info
            </summary>
            <param name="idFrom">Starting object ID</param>
            <param name="idTo">Ending object ID</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.FakeObject``1(System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Fakes the data for the given info
            </summary>
            <param name="id">ID of the fake object</param>
            <param name="siteId">Optional site ID of the object</param>
            <param name="finalizer">Optional action allowing to seed additional fields.</param>
            <remarks>
            When <paramref name="finalizer"/> is called, provided <typeparamref name="TInfo"/> object has following properties already set:
            <see cref="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectID"/>,
            <see cref="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectCodeName"/>,
            <see cref="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectGUID"/>,
            <see cref="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectDisplayName"/>.
            </remarks>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.GetTestGuid(System.Int32)">
            <summary>
            Gets a predictable test GUID for the given ID
            </summary>
            <param name="id">Source ID</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.GetClassXmlSchema``1(System.Boolean)">
            <summary>
            Gets the class XML schema for the given type
            </summary>
            <param name="getFromParentType">If true, the columns from parent type are extracted</param>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithData.FakeLicense">
            <summary>
            Fakes the license for localhost according to related config key
            </summary>
        </member>
        <member name="P:CMS.Tests.AutomatedTestsWithData.ConnectionAvailable">
            <summary>
            Indicates whether the db connection is available
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.TestsWithConnStringFixtureSetup">
            <summary>
            Sets up the test database before all tests
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.TestsWithConnStringSetup">
            <summary>
            Sets up the test database
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.TestsWithConnStringTearDown">
            <summary>
            Cleans up the test database
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.TestsWithConnStringFixtureTearDown">
            <summary>
            Test fixture tear down
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.FakeEventLogProvider">
            <summary>
            Fakes the event log provider to attach additional actions for test behavior
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.SetupConnectionStrings">
            <summary>
            Sets up the connection strings for the test
            </summary>
        </member>
        <member name="M:CMS.Tests.AutomatedTestsWithConnString.GetTestApplicationSettings(System.String)">
            <summary>
            Reads settings from test application configuration file. 
            </summary>
            <param name="key">Setting key.</param> 
        </member>
        <member name="T:CMS.Tests.ExtraDatabaseAttribute">
            <summary>
            Provides an extra database within the given test
            The extra database can be use by a block of code using method ExecuteWithExtraDatabase
            You can alternatively use method <see cref="M:CMS.Tests.IsolatedIntegrationTests.EnsureExtraDatabase(System.String)"/> to initialize an extra database on-the-fly
            </summary>
        </member>
        <member name="M:CMS.Tests.ExtraDatabaseAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Database name</param>
        </member>
        <member name="P:CMS.Tests.ExtraDatabaseAttribute.Name">
            <summary>
            Database name
            </summary>
        </member>
        <member name="T:CMS.Tests.DatabaseProperties">
            <summary>
            Represents properties of a database used in isolated integration tests.
            </summary>
        </member>
        <member name="M:CMS.Tests.DatabaseProperties.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Tests.DatabaseProperties"/> class.
            </summary>
            <param name="name">The name of the database.</param>
            <param name="folderPath">The name of the database file.</param>
            <param name="fileName">The name of the database log file.</param>
        </member>
        <member name="M:CMS.Tests.DatabaseProperties.CreateForInstance(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Tests.DatabaseProperties"/> class that represents an instance database.
            </summary>
            <param name="name">The name of the database.</param>
            <param name="folderPath">The path to the folder with database files.</param>
            <returns>A new instance of the <see cref="T:CMS.Tests.DatabaseProperties"/> class that represents an instance database.</returns>
        </member>
        <member name="M:CMS.Tests.DatabaseProperties.CreateForMaster(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Tests.DatabaseProperties"/> class that represents a master database.
            </summary>
            <param name="name">The name of the database.</param>
            <param name="folderPath">The path to the folder with database files.</param>
            <returns>A new instance of the <see cref="T:CMS.Tests.DatabaseProperties"/> class that represents a master database.</returns>
        </member>
        <member name="P:CMS.Tests.DatabaseProperties.Name">
            <summary>
            Gets the name of the database.
            </summary>
        </member>
        <member name="P:CMS.Tests.DatabaseProperties.FileName">
            <summary>
            Gets the name of the database file.
            </summary>
        </member>
        <member name="P:CMS.Tests.DatabaseProperties.LogFileName">
            <summary>
            Gets the name of the database log file.
            </summary>
        </member>
        <member name="P:CMS.Tests.DatabaseProperties.Detached">
            <summary>
            If true, the database has been already detached
            </summary>
        </member>
        <member name="T:CMS.Tests.InitSequenceAnalyzer">
            <summary>
            Analyzes the init sequence of the given list of types
            </summary>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.#ctor(System.Collections.Generic.List{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName},System.Action{System.Int32,System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="types">List of types to analyze</param>
            <param name="assemblies">Assemblies</param>
            <param name="logAction">Log action</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.NotLog(System.Int32,System.String,System.String)">
            <summary>
            Adds a new record to the log file
            </summary>
            <param name="indent">Indentation</param>
            <param name="mark">Text mark (should be 4 chars or less)</param>
            <param name="text">Text to log</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.PrepareCollections">
            <summary>
            Prepares the necessary collections for analysis of the init sequence
            </summary>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetInitSequence">
            <summary>
            Analyzes the init sequence and returns the ordered list of types to initialize
            </summary>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetInitSequence(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Gets the init sequence for the given type list
            </summary>
            <param name="types">Type list</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetInitSequence(System.Type,System.Int32)">
            <summary>
            Runs the static constructor of the given type
            </summary>
            <param name="type">Type</param>
            <param name="indent">Call indentation</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.IsProcessedType(System.Type)">
            <summary>
            Returns true if the given type is allowed to be processed
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetInitSequence(System.Reflection.MethodBase,System.Boolean,System.Int32)">
            <summary>
            Gets the init sequence for the given method
            </summary>
            <param name="method">Method to analyze</param>
            <param name="processInherited">If true, processing of the inherited (overridden) methods is allowed</param>
            <param name="indent">Log indentation</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetInitSequenceFromMethodBody(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Gets the initialization sequence from the given method body
            </summary>
            <param name="method">Method to examine</param>
            <param name="indent">Log indent</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetReferencedMembers(System.Reflection.MethodBase)">
            <summary>
            Gets the list of members directly referenced by the given method. Does not examine the members recursively.
            </summary>
            <param name="method">Method to check</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.GetInitSequenceFromInheritedMethods(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Gets the init sequence for the method call from inherited types
            </summary>
            <param name="method">Base method</param>
            <param name="indent">Log indent</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.ParametersMatch(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[])">
            <summary>
            Checks if two given arrays of parameters match
            </summary>
            <param name="p1">First parameters</param>
            <param name="p2">Second parameters</param>
        </member>
        <member name="M:CMS.Tests.InitSequenceAnalyzer.StaticConstructorCallsMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Returns true if the static constructor of the given type calls the given method
            </summary>
            <param name="type">Type to check</param>
            <param name="registerMethod">Method to check</param>
        </member>
        <member name="P:CMS.Tests.InitSequenceAnalyzer.Log">
            <summary>
            Log function
            </summary>
        </member>
        <member name="T:CMS.Tests.IsolatedIntegrationTests">
            <summary>
            Allows integration tests to run in isolation as for each test a clean database with current schema and default objects is created.
            </summary>
            <remarks>
            The isolated integration tests use LocalDB to create and drop databases when needed. It works with two types of database.
            The master database is created using SQL scripts from the solution. For each modification of this folder a new master database is created.
            The master database is detached after it has been created and its files are copied to create an instance database that a running test will use.
            The instance and master databases share a name, but the file names are different.
            The instance database is removed when a test finishes and a master database, that is out of date, is removed automatically.
            </remarks>
        </member>
        <member name="F:CMS.Tests.IsolatedIntegrationTests.mDatabaseScriptFolderPath">
            <summary>
            The path to the folder with SQL scripts.
            </summary>
        </member>
        <member name="F:CMS.Tests.IsolatedIntegrationTests.mDatabaseFolderPath">
            <summary>
            The path to the folder with database files.
            </summary>
        </member>
        <member name="F:CMS.Tests.IsolatedIntegrationTests.mDatabaseInstanceName">
            <summary>
            A name of the instance of Microsoft SQL Server Express LocalDB that will be used to run the tests.
            </summary>
        </member>
        <member name="F:CMS.Tests.IsolatedIntegrationTests.mCreateDatabaseBeforeTests">
            <summary>
            <para>Indicates if database is created before TestFixtureSetup.</para>
            <para>(Instance database for each test is copied from it)</para>
            </summary>
        </member>
        <member name="F:CMS.Tests.IsolatedIntegrationTests.mSolutionFolderPath">
            <summary>
            The path to the root folder of the solution, if found.
            </summary>
        </member>
        <member name="F:CMS.Tests.IsolatedIntegrationTests.mDatabaseFileNameRegex">
            <summary>
            The regular expression that matches test database file names.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Tests.IsolatedIntegrationTests"/> class.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.IsolatedIntegrationTestsSetup">
            <summary>
            Initializes the current test environment.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.SetConnectionAndHashSalts(CMS.Tests.DatabaseProperties)">
            <summary>
            Sets connection strings and hash salt for all set up databases
            </summary>
            <param name="database">Test database</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.InitializeTestClassInternal">
            <summary>
            Initializes the test class for all tests<para/>
            Note: Calling this method in NUnit tests causes duplicate initialization
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.CleanUpTestClassInternal">
            <summary>
            Cleans up the class after all tests are run <para/>
            Note: Calling this method in NUnit tests causes duplicate clean up
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.InitAppAndDatabaseBeforeTests">
            <summary>
            Inits shared database (if required)
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.IsolatedIntegrationTestsFixtureSetup">
            <summary>
            Init shared instance database in NUnit tests.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.IsolatedIntegrationTestsTearDown">
            <summary>
            Cleans the current test environment.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.IsolatedIntegrationTestsFixtureTearDown">
            <summary>
            Removes shared instance database in NUnit tests.
            Note: This method is called automatically in NUnit tests.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetTestUniqueIndex">
            <summary>
            Gets a unique index for the test run.
            All calls from a single test run return the same index.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureLicense">
            <summary>
            Inserts the license for localhost according to related config key
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ExecuteOnceAcrossAppDomains(System.Action,System.String,System.Boolean)">
            <summary>
            Ensures that the given action is executed only once at a time across all application domains using <see cref="T:System.Threading.Mutex"/>
            </summary>
            <param name="action">Action to execute</param>
            <param name="mutexName">Name of the <see cref="T:System.Threading.Mutex"/> to use</param>
            <param name="waitForCompletion">If true, the other callers wait for the action completion</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetMutexSecuritySettings">
            <summary>
            Returns Mutex security settings to allow access to it by multiple users
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureLocalDatabases(System.String,System.String)">
            <summary>
            Provides a current version of the instance database.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureMasterDatabase(System.String)">
            <summary>
            Ensures the master database as a source for local databases
            </summary>
            <param name="masterDatabaseName">Master database name</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureLocalDatabase(CMS.Tests.DatabaseProperties,System.String)">
            <summary>
            Provides a current version of the instance database.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ReleaseDatabases(CMS.Tests.DatabaseProperties)">
            <summary>
            Removes the instance database with the specified name.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ReleaseLocalDatabase(CMS.Tests.DatabaseProperties)">
            <summary>
            Removes the instance database with the specified name.
            </summary>
            <param name="database">Name of instance database</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.CreateInstanceDatabase(CMS.Tests.DatabaseProperties,CMS.Tests.DatabaseProperties)">
            <summary>
            Creates an instance database from the specified master database.
            </summary>
            <param name="database">Properties of the instance database to create.</param>
            <param name="masterDatabase">Properties of the master database.</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.RemoveDatabase(CMS.Tests.DatabaseProperties)">
            <summary>
            Removes the specified database.
            </summary>
            <param name="database">Properties of the database to remove.</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.DetachDatabase(CMS.Tests.DatabaseProperties)">
            <summary>
            Detaches the given database so it can be deleted
            </summary>
            <param name="database">Database to detach</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureMasterDatabase(CMS.Tests.DatabaseProperties)">
            <summary>
            Creates a current master database if necessary.
            </summary>
            <param name="database">Properties of the master database to create.</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.PurgeDatabaseFolder">
            <summary>
            Removes files of all test databases.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.InitializeMasterDatabase(CMS.Tests.DatabaseProperties)">
            <summary>
            Initializes the specified master database using current SQL scripts and default data.
            </summary>
            <param name="database">Properties of the master database to initialize.</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.UpdateMacroSignatures(System.Object,CMS.DataEngine.DataSetPostProcessingEventArgs)">
            <summary>
            Updates macro signatures in default data.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.HandleDatabaseInstallationMessage(System.String,CMS.DataEngine.MessageTypeEnum)">
            <summary>
            Handles messages reported during the initialization of the database and throws en exception if there is a problem.
            </summary>
            <param name="message">The message.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetDatabaseScriptTimestamp">
            <summary>
            Gets the UTC date and time when the SQL scripts were last modified.
            </summary>
            <returns>The UTC date and time when the SQL scripts were last modified.</returns>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetDatabaseScriptPath">
            <summary>
            Gets the path to the file or folder with SQL scripts that the installer requires.
            </summary>
            <returns>The path to the file or folder with SQL scripts.</returns>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetMasterDatabaseProperties">
            <summary>
            Gets properties of the current master database.
            </summary>
            <returns>Properties of the current master database.</returns>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetInstanceDatabaseProperties(System.String)">
            <summary>
            Gets properties of the instance database using the specified database name.
            </summary>
            <param name="databaseName">A name of the instance database.</param>
            <returns>Properties of the instance database.</returns>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetServerConnectionString">
            <summary>
            Gets a connection string for the LocalDB instance.
            </summary>
            <returns>A connection string to the LocalDB instance.</returns>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.GetConnectionString(CMS.Tests.DatabaseProperties)">
            <summary>
            Gets a connection string for the specified instance database.
            </summary>
            <param name="database">Properties of the instance database to connect to.</param>
            <returns>A connection string for the specified instance database.</returns>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.SetConnectionAndHashSalt(CMS.Tests.DatabaseProperties)">
            <summary>
            Sets connection strings and hash salt for all set up databases
            </summary>
            <param name="database">Test database</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.InitSharedDatabase(System.String)">
            <summary>
            Init shared instance database in MSTest tests.
            Note: Use this method in method marked with [ClassInitialize] attribute.
            </summary>
            <param name="suffix">Database suffix</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.CleanUpSharedDatabase">
            <summary>
            Removes shared instance database in MSTest tests.
            Note: Use this method in method marked with [ClassCleanup] attribute.
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureExtraDatabases(System.String)">
            <summary>
            Provides extra databases for the test
            </summary>
            <param name="instanceDatabaseName">Instance database name. Used as a base name for extra databases</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.SetExtraDatabasesConnectionStrings">
            <summary>
            Sets connection strings for all extra databases
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.CreateExtraDatabase(CMS.Tests.DatabaseProperties,System.String,System.String)">
            <summary>
            Creates a specified extra database and adds it to the list of databases
            </summary>
            <param name="masterDatabase">Master database</param>
            <param name="instanceDatabaseName">Instance database name</param>
            <param name="extraDbName">Extra database name</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.SetExtraDatabaseConnectionString(System.String,CMS.Tests.DatabaseProperties)">
            <summary>
            Sets connection string for an extra database
            </summary>
            <param name="extraDbName">Database name</param>
            <param name="extraDb">Database properties</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ReleaseExtraDatabases">
            <summary>
            Releases all allocated extra databases
            </summary>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ExecuteWithAllDatabases(System.Action{System.String})">
            <summary>
            Executes the same given action in the context of all test databases. 
            Original database is handled first.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.EnsureExtraDatabase(System.String)">
            <summary>
            Ensures the specified extra database for the test
            </summary>
            <param name="dbName">Database name</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ExecuteWithExtraDatabase(System.String,System.Action{System.String})">
            <summary>
            Executes the given action in the context of the given extra database
            </summary>
            <param name="dbName">Database name</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:CMS.Tests.IsolatedIntegrationTests.ExtraDatabaseExists(System.String)">
            <summary>
            Returns true if the given extra database exists
            </summary>
            <param name="dbName">Database name</param>
        </member>
        <member name="P:CMS.Tests.IsolatedIntegrationTests.MutexSecuritySettings">
            <summary>
            Returns Mutex security settings to allow access to it by multiple users
            </summary>
        </member>
        <member name="P:CMS.Tests.IsolatedIntegrationTests.DatabaseScriptFolderPath">
            <summary>
            Gets the path to the folder with SQL scripts.
            </summary>
        </member>
        <member name="P:CMS.Tests.IsolatedIntegrationTests.DatabaseFolderPath">
            <summary>
            Gets the path to the folder with database files.
            </summary>
        </member>
        <member name="P:CMS.Tests.IsolatedIntegrationTests.DatabaseInstanceName">
            <summary>
            Gets a name of the instance of Microsoft SQL Server Express LocalDB that will be used to create a database.
            </summary>
        </member>
        <member name="P:CMS.Tests.IsolatedIntegrationTests.SharedDatabaseForAllTests">
            <summary>
            <para>Indicates if the same database is used for all tests in same test class.</para>
            </summary>
        </member>
        <member name="T:CMS.Tests.FakeSettingsService">
            <summary>
            Fake settings service
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeSettingsService.IsAvailable">
            <summary>
            Always returns true
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeSettingsService.Item(System.String)">
            <summary>
            Settings key
            </summary>
            <param name="keyName">Settings key</param>
        </member>
        <member name="T:CMS.Tests.TestsCategoryCheck">
            <summary>
            Provides methods for checking the test categories
            </summary>
        </member>
        <member name="F:CMS.Tests.TestsCategoryCheck.APP_KEY_EXCLUDED_CATEGORIES">
            <summary>
            Name of app key for excluded categories
            </summary>
        </member>
        <member name="F:CMS.Tests.TestsCategoryCheck.APP_KEY_RESTRICTED_CATEGORIES">
            <summary>
            Name of app key for restricted categories
            </summary>
        </member>
        <member name="M:CMS.Tests.TestsCategoryCheck.CheckCategories(System.Type)">
            <summary>
            Tests from not restricted or excluded categories are ignored
            </summary>
        </member>
        <member name="M:CMS.Tests.TestsCategoryCheck.CheckAllTestsCategories(System.Type)">
            <summary>
            Performs category check for all tests in current test class.
            </summary>
            <param name="type">Test type</param>
            <returns>True if at least one test passed the category check.</returns>
        </member>
        <member name="M:CMS.Tests.TestsCategoryCheck.GetClassAndAssemblyCategories(System.Type)">
            <summary>
            Get categories assigned to current test class and assembly.
            </summary>
            <param name="type">Test type</param>
            <returns>String array of all categories assigned to current test class and assembly.</returns>
        </member>
        <member name="T:CMS.Tests.TestExtender`1">
            <summary>
            Generic base class for test extender
            </summary>
            <typeparam name="TParentTest">Type of parent test. This type specifies on which test level the extender should be applied</typeparam>
        </member>
        <member name="T:CMS.Tests.TestExtender">
            <summary>
            Base class for test extenders
            </summary>
        </member>
        <member name="M:CMS.Tests.TestExtender.FixtureSetUp">
            <summary>
            Test fixture setup
            </summary>
        </member>
        <member name="M:CMS.Tests.TestExtender.SetUp">
            <summary>
            Test setup
            </summary>
        </member>
        <member name="M:CMS.Tests.TestExtender.FixtureTearDown">
            <summary>
            Test fixture tear down
            </summary>
        </member>
        <member name="M:CMS.Tests.TestExtender.TearDown">
            <summary>
            Test tear down
            </summary>
        </member>
        <member name="M:CMS.Tests.TestExtender.TestMilestone">
            <summary>
            Test milestone
            </summary>
        </member>
        <member name="P:CMS.Tests.TestExtender.Milestone">
            <summary>
            Milestone action
            </summary>
        </member>
        <member name="T:CMS.Tests.WebAppInstanceTests">
            <summary>
            Base class for integration tests that require running web app instance.
            </summary>
        </member>
        <member name="M:CMS.Tests.WebAppInstanceTests.SetupConnectionStrings">
            <summary>
            Sets up the connection strings for the test
            </summary>
        </member>
        <member name="M:CMS.Tests.WebAppInstanceTests.InitializeTestClassInternal">
            <summary>
            Initializes the test class for all tests<para/>
            Note: Calling this method in NUnit tests causes duplicate initialization
            </summary>
        </member>
        <member name="M:CMS.Tests.WebAppInstanceTests.InitWebAppInstanceTestFixture">
            <summary>
            Initializes web app instance test fixture.
            </summary>
        </member>
        <member name="M:CMS.Tests.WebAppInstanceTests.InitWebAppInstanceTests">
            <summary>
            Initializes web app instance test.
            </summary>
        </member>
        <member name="P:CMS.Tests.WebAppInstanceTests.Site">
            <summary>
            Site that is running on the <see cref="P:CMS.Tests.WebAppInstanceTests.InstanceUrl"/>.
            </summary>
        </member>
        <member name="P:CMS.Tests.WebAppInstanceTests.InstanceUrl">
            <summary>
            Url of requested web application.
            </summary>
        </member>
        <member name="T:CMS.Tests.Benchmark">
            <summary>
            Benchmark class
            </summary>
        </member>
        <member name="F:CMS.Tests.Benchmark.BenchmarkAction">
            <summary>
            Gets the benchmark action.
            </summary>
        </member>
        <member name="M:CMS.Tests.Benchmark.This(System.Action)">
            <summary>
            Creates a new benchmark with the specified action to be benchmarked.
            </summary>
            <param name="action">Action to be benchmarked</param>
        </member>
        <member name="M:CMS.Tests.Benchmark.This(System.Action{System.Diagnostics.Stopwatch})">
            <summary>
            Creates a new benchmark with the specified benchmark action.
            </summary>
            <param name="benchmarkAction">Benchmark action</param>
        </member>
        <member name="M:CMS.Tests.Benchmark.RunWithWarmup(System.Int32)">
            <summary>
            Executes the benchmarked action a specified number of times and returns the result.
            Runs the action once prior to benchmarking.
            </summary>
            <param name="times">Number of times the benchmarked action to be run</param>
        </member>
        <member name="M:CMS.Tests.Benchmark.Run(System.Int32)">
            <summary>
            Executes the benchmarked action a specified number of times and returns the result.
            </summary>
            <param name="times">Number of times the benchmarked action to be run</param>
        </member>
        <member name="T:CMS.Tests.BenchmarkResult">
            <summary>
            Benchmark result class
            </summary>
        </member>
        <member name="F:CMS.Tests.BenchmarkResult.Results">
            <summary>
            Gets the underlaying results.
            </summary>
        </member>
        <member name="M:CMS.Tests.BenchmarkResult.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            Constructor
            </summary>
            <param name="results">Results of the benchmark action runs</param>
        </member>
        <member name="M:CMS.Tests.BenchmarkResult.Write(System.IO.TextWriter)">
             <summary>
            Writes the formatted information about the results using the specified writer.
             Uses the System.Console.Out writer if no writer is specified.
             </summary>
             <param name="writer">Writer</param>
        </member>
        <member name="P:CMS.Tests.BenchmarkResult.Average">
            <summary>
            Gets the average result time in milliseconds.
            </summary>
        </member>
        <member name="P:CMS.Tests.BenchmarkResult.Min">
            <summary>
            Gets the shortest result time in milliseconds.
            </summary>
        </member>
        <member name="P:CMS.Tests.BenchmarkResult.Max">
            <summary>
            Gets the longest result time in milliseconds.
            </summary>
        </member>
        <member name="T:CMS.Tests.FakeEventLogProvider">
            <summary>
            Fake event log provider for tests. By default reports logged errors as failed test, logs warnings to output, and ignores information.
            </summary>
        </member>
        <member name="F:CMS.Tests.FakeEventLogProvider.OnSetEventLogInfoInternal">
            <summary>
            Action performed when  
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeEventLogProvider.SetEventLogInfoInternal(CMS.EventLog.EventLogInfo)">
            <summary>
            Logs the event. Overrides the event by actions needed for tests
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="M:CMS.Tests.FakeEventLogProvider.LogTestEvent(CMS.EventLog.EventLogInfo)">
            <summary>
            Logs the event
            </summary>
            <param name="eventObject">Event object</param>
        </member>
        <member name="P:CMS.Tests.FakeEventLogProvider.LogEventsToDatabase">
            <summary>
            If true, the events are logged to the database. Default false
            </summary>
        </member>
        <member name="T:CMS.Tests.FakeMethods">
            <summary>
            Class providing methods for faking the data
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeMethods.#ctor(CMS.Tests.AutomatedTestsWithData)">
            <summary>
            Constructor
            </summary>
            <param name="parentTests">Parent unit tests</param>
        </member>
        <member name="M:CMS.Tests.FakeMethods.Info``1(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Fakes the data for the given info
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="M:CMS.Tests.FakeMethods.InfoProvider``2">
            <summary>
            Fakes the data for the given info and provider
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeMethods.GetClassXmlSchema``1(System.Boolean)">
            <summary>
            Gets the class XML schema for the given type
            </summary>
            <param name="getFromParentType">If true, the columns from parent type are extracted</param>
        </member>
        <member name="M:CMS.Tests.FakeMethods.ResetAllFakes">
            <summary>
            Resets all fakes
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeMethods.ParentTests">
            <summary>
            Parent tests
            </summary>
        </member>
        <member name="T:CMS.Tests.FakeClassStructureInfo`1">
            <summary>
            Class structure info for testing purposes
            </summary>
        </member>
        <member name="T:CMS.Tests.FakeClassStructureInfo">
            <summary>
            Class structure info for testing purposes
            </summary>
        </member>
        <member name="F:CMS.Tests.FakeClassStructureInfo.NestedClasses">
            <summary>
            Nested class structures
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeClassStructureInfo.#ctor(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="M:CMS.Tests.FakeClassStructureInfo.AddNestedClass(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Adds the nested class to this class structure info
            </summary>
            <param name="nested">Nested class</param>
        </member>
        <member name="M:CMS.Tests.FakeClassStructureInfo.IncludeColumns(System.Type)">
            <summary>
            Includes the columns from the given type
            </summary>
            <param name="type">Type from which the columns should be collected</param>
        </member>
        <member name="M:CMS.Tests.FakeClassStructureInfo.RegisterColumns(System.Type,System.Boolean)">
            <summary>
            Registers the columns from the given type. Returns true if some columns were registered
            </summary>
            <param name="type">Type from which the columns should be collected</param>
            <param name="onlyMarked">If true, only marked columns are registered</param>
        </member>
        <member name="M:CMS.Tests.FakeClassStructureInfo.GetNewDataSet">
            <summary>
            Gets new data structure for class data as a DataSet.
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeClassStructureInfo.ClassType">
            <summary>
            Class type
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeClassStructureInfo.GetFromParentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeClassStructureInfo.ClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeClassStructureInfo.IDColumn">
            <summary>
            ID column name.
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeClassStructureInfo`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CMS.Tests.Category">
            <summary>
            Class containing specific category attributes
            </summary>
        </member>
        <member name="T:CMS.Tests.Category.UnitAttribute">
            <summary>
            Unit test category
            </summary>
        </member>
        <member name="T:CMS.Tests.Category.IntegrationAttribute">
            <summary>
            Integration test category
            </summary>
        </member>
        <member name="T:CMS.Tests.Category.IsolatedIntegrationAttribute">
            <summary>
            Isolated integration test category
            </summary>
        </member>
        <member name="T:CMS.Tests.Category.UITestsAttribute">
            <summary>
            UI test category
            </summary>
        </member>
        <member name="T:CMS.Tests.Category.JavaScriptAttribute">
            <summary>
            Java script test category
            </summary>
        </member>
        <member name="T:CMS.Tests.Category.LongRunningAttribute">
            <summary>
            Long-running test category
            </summary>
        </member>
        <member name="T:CMS.Tests.CMSAssert">
            <summary>
            Custom assertions
            </summary>
        </member>
        <member name="M:CMS.Tests.CMSAssert.Serialization``1(``0)">
            <summary>
            Asserts that the serialization / de-serialization of the object is possible, and produces 
            </summary>
            <param name="obj">Object to test</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.Serialization``2(``1)">
            <summary>
            Asserts that the serialization / de-serialization of the object is possible. Returns the de-serialized clone
            </summary>
            <param name="obj">Object to test</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Asserts the given expression for each item in the given collection
            </summary>
            <param name="items">Items to assert</param>
            <param name="action">Assert action for the item</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.All(System.Action[])">
            <summary>
            Execute multiple assertions
            </summary>
            <param name="assertionsToRun">Assertions to be executed</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.WithMessage(System.String,System.Action)">
            <summary>
            Executes assertion and adds additional message if assertion fails
            </summary>
            <param name="message">Extra message in case assertion fails</param>
            <param name="assertionToRun">Assertion to be executed</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.GetMessage(System.Exception)">
            <summary>
            Gets the full exception message from all inner exceptions
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.InThreads(System.Int32,System.Action{System.Int32})">
            <summary>
            Runs multiple actions in the given number of threads and reports all failed assertions and errors 
            </summary>
            <param name="count">Threads count</param>
            <param name="action">Thread action</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.PropertyValuesEqual(System.Object,System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Asserts two objects by comparing their property values
            </summary>
            <param name="actual">Current object</param>
            <param name="expected">Expected object</param>
            <param name="condition">Property condition</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.QueryEquals(CMS.DataEngine.WhereCondition,System.String,System.String)">
            <summary>
            Asserts whether two queries equal
            </summary>
            <param name="current">Current query</param>
            <param name="expected">Expected query</param>
            <param name="message">Optional error message</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.QueryEquals(System.String,System.String,System.String)">
            <summary>
            Asserts whether two queries equal
            </summary>
            <param name="current">Current query</param>
            <param name="expected">Expected query</param>
            <param name="message">Optional error message</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.TextEquals(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Asserts whether two queries equal
            </summary>
            <param name="current">Current query</param>
            <param name="expected">Expected query</param>
            <param name="message">Optional error message</param>
            <param name="normalizeWhiteSpaces">If true, the input texts are normalized to avoid mismatch on whitespaces</param>
        </member>
        <member name="M:CMS.Tests.CMSAssert.TextEquals(System.String,System.String,System.String,CMS.Helpers.TextNormalizationSettings)">
            <summary>
            Asserts whether two queries equal
            </summary>
            <param name="current">Current query</param>
            <param name="expected">Expected query</param>
            <param name="message">Optional error message</param>
            <param name="settings">Text normalization settings</param>
        </member>
        <member name="T:CMS.Tests.JSONConstraint">
            <summary>
            Constraint that compares two JSON sources with each other.
            </summary>
        </member>
        <member name="M:CMS.Tests.JSONConstraint.Matches(System.Object)">
            <summary>
            Tests whether the constraint is satisfied by a given value.
            </summary>
            <param name="actualValue">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:CMS.Tests.JSONConstraint.WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Writes the constraint description to a MessageWriter
            </summary>
            <param name="writer">The writer on which the description is displayed</param>
        </member>
        <member name="M:CMS.Tests.JSONConstraint.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="M:CMS.Tests.JSONConstraint.IsSimilarTo(System.String)">
            <summary>
            Creates JSONConstraint which compares the test-Object with the given string.
            </summary>
            <param name="expectedJSON"></param>
            <returns></returns>
        </member>
        <member name="M:CMS.Tests.JSONConstraint.IsSimilarTo(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates JSONConstraint which compares the test-Object with the given JObject.
            </summary>
            <param name="expectedJObject"></param>
            <returns></returns>
        </member>
        <member name="T:CMS.Tests.InfoFake`1">
            <summary>
            Fakes the given info
            </summary>
        </member>
        <member name="T:CMS.Tests.InfoFake">
            <summary>
            Fakes the given info
            </summary>
        </member>
        <member name="T:CMS.Tests.IFake">
            <summary>
            Interface for the fakes
            </summary>
        </member>
        <member name="M:CMS.Tests.IFake.Reset">
            <summary>
            Resets the fake
            </summary>
        </member>
        <member name="F:CMS.Tests.InfoFake.mNestedFakes">
            <summary>
            Nested fakes
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoFake.#ctor(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="M:CMS.Tests.InfoFake.FakeInfo(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Fakes the info object
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="M:CMS.Tests.InfoFake.ResetInfo(System.Type)">
            <summary>
            Resets the info fake
            </summary>
            <param name="type">Info type to fake</param>
        </member>
        <member name="M:CMS.Tests.InfoFake.Reset">
            <summary>
            Resets the fake
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoFake.InfoType">
            <summary>
            Info type
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoFake.ClassStructureInfo">
            <summary>
            Faked class structure info
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoFake.FakeClassStructureInfo">
            <summary>
            Faked class structure info
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoFake`1.#ctor(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="M:CMS.Tests.InfoFake`1.EnsureSettingsWithType(CMS.DataEngine.InfoFakeSettings)">
            <summary>
            Applies type to settings
            </summary>
            <param name="settings">Fake settings</param>
        </member>
        <member name="T:CMS.Tests.InfoProviderFake`2">
            <summary>
            Fakes the given info and provider
            </summary>
        </member>
        <member name="F:CMS.Tests.InfoProviderFake`2.mProviders">
            <summary>
            Faked provider
            </summary>
        </member>
        <member name="F:CMS.Tests.InfoProviderFake`2.mInfoFake">
            <summary>
            Faked info
            </summary>
        </member>
        <member name="F:CMS.Tests.InfoProviderFake`2.mSourceItems">
            <summary>
            Source items
            </summary>
        </member>
        <member name="F:CMS.Tests.InfoProviderFake`2.mSourceData">
            <summary>
            Source data
            </summary>
        </member>
        <member name="F:CMS.Tests.InfoProviderFake`2.mDataFaked">
            <summary>
            If true, the data of the provider was faked
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.EnsureDefaultProvider">
            <summary>
            Ensures the default provider object
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.#ctor(`1,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="providerObject">Provider object</param>
            <param name="fakeInfo">If true, the info object structure is faked</param>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.IncludeData(`0[])">
            <summary>
            Includes the given data to the source items while keeping the existing data intact
            </summary>
            <param name="sourceItems">Source items to include</param>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.WithData(`0[])">
            <summary>
            Fakes the data for the given provider. Resets any previous data and only includes the given source items.
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.WithOriginalSourceName">
            <summary>
            Ensures that the original data source name is used for the faked data
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.GetDataQuerySource">
            <summary>
            Gets the data query source
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.FakeProviderSource">
            <summary>
            Fakes the source of the provider to the data of this fake
            </summary>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.PrepareData(`0[],CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Prepares the source items to be able to be used in fake data
            </summary>
            <param name="sourceItems">Source items</param>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.FakeProvider(CMS.DataEngine.BaseAbstractInfoProvider,CMS.DataEngine.MemoryDataQuerySource)">
            <summary>
            Fakes the given provider with the given source
            </summary>
            <param name="provider"></param>
            <param name="source"></param>
        </member>
        <member name="M:CMS.Tests.InfoProviderFake`2.Reset">
            <summary>
            Resets the fake
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoProviderFake`2.ProviderIsDefault">
            <summary>
            Returns true if the used provider is a default provider
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoProviderFake`2.DataQuerySource">
            <summary>
            Gets the data query source
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoProviderFake`2.SourceData">
            <summary>
            Source data
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoProviderFake`2.ProviderObject">
            <summary>
            Provider object
            </summary>
        </member>
        <member name="P:CMS.Tests.InfoProviderFake`2.OriginalProviderObject">
            <summary>
            Original provider object
            </summary>
        </member>
        <member name="T:CMS.Tests.UnitTests">
            <summary>
            Base class for integration tests
            </summary>
        </member>
        <member name="M:CMS.Tests.UnitTests.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Tests.UnitTests.UnitTestsSetUp">
            <summary>
            Initializes the test
            </summary>
        </member>
        <member name="M:CMS.Tests.UnitTests.ResetAllFakes">
            <summary>
            Resets all fakes
            </summary>
        </member>
        <member name="T:CMS.Tests.IntegrationTests">
            <summary>
            Base class for integration tests
            </summary>
        </member>
        <member name="M:CMS.Tests.IntegrationTests.IntegrationTestsFixtureSetup">
            <summary>
            Fixture setup
            </summary>
        </member>
        <member name="M:CMS.Tests.IntegrationTests.IntegrationTestsSetup">
            <summary>
            Test setup
            </summary>
        </member>
        <member name="M:CMS.Tests.IntegrationTests.IntegrationTestsTearDown">
            <summary>
            Test tear down
            </summary>
        </member>
        <member name="M:CMS.Tests.IntegrationTests.IntegrationTestsFixtureTearDown">
            <summary>
            Fixture tear down
            </summary>
        </member>
        <member name="M:CMS.Tests.IntegrationTests.SetupConnectionStrings">
            <summary>
            Sets up the connection strings for the test
            </summary>
        </member>
        <member name="P:CMS.Tests.IntegrationTests.TestOMSeparation">
            <summary>
            If true, the test will simulate the run in a context of separated OM database
            </summary>
        </member>
        <member name="T:CMS.Tests.TestsConfig">
            <summary>
            Shared tests configuration
            </summary>
        </member>
        <member name="M:CMS.Tests.TestsConfig.GetSolutionFolderPath">
            <summary>
            Gets a path to the root folder of the Kentico solution provided that it contains a test project with current test.
            </summary>
            <returns>A path to the Kentico solution folder, if found; otherwise, null.</returns>
        </member>
        <member name="M:CMS.Tests.TestsConfig.GetTestAppSetting(System.String)">
            <summary>
            Gets the app setting from test configuration file 
            </summary>
            <param name="name">App setting name</param>
        </member>
        <member name="M:CMS.Tests.TestsConfig.GetTestConnectionString(System.String)">
            <summary>
            Gets the connection string of the given name from test configuration file
            </summary>
            <param name="name">Connection string name</param>
        </member>
        <member name="P:CMS.Tests.TestsConfig.GlobalTestsConfig">
            <summary>
            Global configuration file for tests (Tests.config located in root directory)
            </summary>
        </member>
        <member name="T:CMS.Tests.UnitTestExtensions">
            <summary>
            Extension methods for tests
            </summary>
        </member>
        <member name="M:CMS.Tests.UnitTestExtensions.GetTestQueryMark">
            <summary>
            Gets the unique SQL query mark for a unit test
            </summary>
        </member>
        <member name="M:CMS.Tests.UnitTestExtensions.FakeExecution(CMS.DataEngine.IDataQuery,System.Action{CMS.DataEngine.ExecuteQueryEventArgs{System.Data.DataSet}},System.Boolean)">
            <summary>
            Fakes the execution of a query
            </summary>
            <param name="query">Query to fake</param>
            <param name="execution">Execution code</param>
            <param name="cancel">True when query execution should be canceled</param>
        </member>
        <member name="T:CMS.Tests.FakeStorageProvider">
             <summary>
             Testing IO storage provider.
             
             Usage example:
             
                [Test]
                public void SampleTestMethod()
                {
                    TestStorageProvider provider = TestStorageProvider.GetMappedProvider();
                    provider.FileObject.ReadAllText("path").ReturnsForAnyArgs("text");
                    string result = CMS.IO.File.ReadAllText("path");
            
                    Assert.AreEqual("text", result);
                }
             
             </summary>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.#ctor(System.String)">
            <summary>
            Creates new instance of test storage provider.
            </summary>
            <param name="webApplicationPath">Web application path.</param>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.CreateFileProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.CreateDirectoryProviderObject">
            <summary>
            Creates new directory provider object
            </summary>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetFileInfo(System.String)">
            <summary>
            Returns new instance of FileInfo object.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetDirectoryInfo(System.String)">
            <summary>
            Returns new instance of directory info.
            </summary>
            <param name="path">Path</param> 
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetFileStream(System.String,CMS.IO.FileMode)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>  
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>        
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetFileStream(System.String,CMS.IO.FileMode,CMS.IO.FileAccess,CMS.IO.FileShare,System.Int32)">
            <summary>
            Returns new instance of file stream.
            </summary>
            <param name="path">Path to file</param>
            <param name="mode">File mode</param>    
            <param name="access">File access</param>
            <param name="bufferSize">Buffer size</param>
            <param name="share">Sharing permissions</param>
        </member>
        <member name="M:CMS.Tests.FakeStorageProvider.GetMappedProvider(System.String,System.String)">
            <summary>
            Returns new instance of TestStorageProvider and maps provider to given path.
            </summary>
            <param name="webAppPath">Web application path.</param>
            <param name="providerPath">Path on which the provider should be mapped.</param>
        </member>
        <member name="P:CMS.Tests.FakeStorageProvider.FileObject">
            <summary>
            File object.
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeStorageProvider.DirectoryObject">
            <summary>
            Directory object.
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeStorageProvider.FileInfoObject">
            <summary>
            FileInfo object.
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeStorageProvider.DirectoryInfoObject">
            <summary>
            DirectoryInfo object.
            </summary>
        </member>
        <member name="P:CMS.Tests.FakeStorageProvider.FileStreamObject">
            <summary>
            FileStream object.
            </summary>
        </member>
    </members>
</doc>
